// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package blockchain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2ff71951DecodeBlockchain(in *jlexer.Lexer, out *LatestBlock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "time":
			out.Time = uint64(in.Uint64())
		case "block_index":
			out.BlockIndex = uint64(in.Uint64())
		case "height":
			out.Height = uint64(in.Uint64())
		case "txIndexes":
			if in.IsNull() {
				in.Skip()
				out.TxIndexes = nil
			} else {
				in.Delim('[')
				if out.TxIndexes == nil {
					if !in.IsDelim(']') {
						out.TxIndexes = make([]uint64, 0, 8)
					} else {
						out.TxIndexes = []uint64{}
					}
				} else {
					out.TxIndexes = (out.TxIndexes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint64
					v1 = uint64(in.Uint64())
					out.TxIndexes = append(out.TxIndexes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ff71951EncodeBlockchain(out *jwriter.Writer, in LatestBlock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Time))
	}
	{
		const prefix string = ",\"block_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BlockIndex))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Height))
	}
	{
		const prefix string = ",\"txIndexes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TxIndexes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.TxIndexes {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LatestBlock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ff71951EncodeBlockchain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LatestBlock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ff71951EncodeBlockchain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LatestBlock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ff71951DecodeBlockchain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LatestBlock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ff71951DecodeBlockchain(l, v)
}
func easyjson2ff71951DecodeBlockchain1(in *jlexer.Lexer, out *Blocks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blocks":
			if in.IsNull() {
				in.Skip()
				out.Blocks = nil
			} else {
				in.Delim('[')
				if out.Blocks == nil {
					if !in.IsDelim(']') {
						out.Blocks = make([]Block, 0, 1)
					} else {
						out.Blocks = []Block{}
					}
				} else {
					out.Blocks = (out.Blocks)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Block
					(v4).UnmarshalEasyJSON(in)
					out.Blocks = append(out.Blocks, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ff71951EncodeBlockchain1(out *jwriter.Writer, in Blocks) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"blocks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Blocks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Blocks {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Blocks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ff71951EncodeBlockchain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Blocks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ff71951EncodeBlockchain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Blocks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ff71951DecodeBlockchain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Blocks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ff71951DecodeBlockchain1(l, v)
}
func easyjson2ff71951DecodeBlockchain2(in *jlexer.Lexer, out *Block) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "ver":
			out.Ver = int64(in.Int64())
		case "prev_block":
			out.PrevBlock = string(in.String())
		case "mrkl_root":
			out.MrklRoot = string(in.String())
		case "time":
			out.Time = uint64(in.Uint64())
		case "bits":
			out.Bits = uint64(in.Uint64())
		case "fee":
			out.Fee = int64(in.Int64())
		case "nonce":
			out.Nonce = uint64(in.Uint64())
		case "n_tx":
			out.NTx = uint64(in.Uint64())
		case "size":
			out.Size = uint64(in.Uint64())
		case "block_index":
			out.BlockIndex = uint64(in.Uint64())
		case "main_chain":
			out.MainChain = bool(in.Bool())
		case "height":
			out.Height = uint64(in.Uint64())
		case "tx":
			if in.IsNull() {
				in.Skip()
				out.Tx = nil
			} else {
				in.Delim('[')
				if out.Tx == nil {
					if !in.IsDelim(']') {
						out.Tx = make([]Tx, 0, 1)
					} else {
						out.Tx = []Tx{}
					}
				} else {
					out.Tx = (out.Tx)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Tx
					easyjson2ff71951DecodeBlockchain3(in, &v7)
					out.Tx = append(out.Tx, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ff71951EncodeBlockchain2(out *jwriter.Writer, in Block) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ver))
	}
	{
		const prefix string = ",\"prev_block\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrevBlock))
	}
	{
		const prefix string = ",\"mrkl_root\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MrklRoot))
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Time))
	}
	{
		const prefix string = ",\"bits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Bits))
	}
	{
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Fee))
	}
	{
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Nonce))
	}
	{
		const prefix string = ",\"n_tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.NTx))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Size))
	}
	{
		const prefix string = ",\"block_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BlockIndex))
	}
	{
		const prefix string = ",\"main_chain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.MainChain))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Height))
	}
	{
		const prefix string = ",\"tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Tx == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Tx {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson2ff71951EncodeBlockchain3(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Block) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ff71951EncodeBlockchain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Block) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ff71951EncodeBlockchain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Block) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ff71951DecodeBlockchain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Block) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ff71951DecodeBlockchain2(l, v)
}
func easyjson2ff71951DecodeBlockchain3(in *jlexer.Lexer, out *Tx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			out.Result = int64(in.Int64())
		case "ver":
			out.Ver = int64(in.Int64())
		case "size":
			out.Size = uint64(in.Uint64())
		case "inputs":
			if in.IsNull() {
				in.Skip()
				out.Inputs = nil
			} else {
				in.Delim('[')
				if out.Inputs == nil {
					if !in.IsDelim(']') {
						out.Inputs = make([]Inputs, 0, 1)
					} else {
						out.Inputs = []Inputs{}
					}
				} else {
					out.Inputs = (out.Inputs)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Inputs
					easyjson2ff71951DecodeBlockchain4(in, &v10)
					out.Inputs = append(out.Inputs, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = uint64(in.Uint64())
		case "block_height":
			out.BlockHeight = uint64(in.Uint64())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "vin_sz":
			out.VinSz = uint64(in.Uint64())
		case "hash":
			out.Hash = string(in.String())
		case "vout_sz":
			out.VoutSz = uint64(in.Uint64())
		case "relayed_by":
			out.RelayedBy = string(in.String())
		case "out":
			if in.IsNull() {
				in.Skip()
				out.Out = nil
			} else {
				in.Delim('[')
				if out.Out == nil {
					if !in.IsDelim(']') {
						out.Out = make([]Out, 0, 1)
					} else {
						out.Out = []Out{}
					}
				} else {
					out.Out = (out.Out)[:0]
				}
				for !in.IsDelim(']') {
					var v11 Out
					easyjson2ff71951DecodeBlockchain5(in, &v11)
					out.Out = append(out.Out, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "weight":
			out.Weight = uint64(in.Uint64())
		case "fee":
			out.Fee = int64(in.Int64())
		case "lock_time":
			out.LockTime = int64(in.Int64())
		case "double_spend":
			out.DoubleSpend = bool(in.Bool())
		case "balance":
			out.Balance = int64(in.Int64())
		case "rbf":
			out.Rbf = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ff71951EncodeBlockchain3(out *jwriter.Writer, in Tx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Result))
	}
	{
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ver))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Size))
	}
	{
		const prefix string = ",\"inputs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Inputs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Inputs {
				if v12 > 0 {
					out.RawByte(',')
				}
				easyjson2ff71951EncodeBlockchain4(out, v13)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Time))
	}
	{
		const prefix string = ",\"block_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BlockHeight))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"vin_sz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.VinSz))
	}
	{
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"vout_sz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.VoutSz))
	}
	{
		const prefix string = ",\"relayed_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelayedBy))
	}
	{
		const prefix string = ",\"out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Out == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Out {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson2ff71951EncodeBlockchain5(out, v15)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Weight))
	}
	{
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Fee))
	}
	{
		const prefix string = ",\"lock_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LockTime))
	}
	{
		const prefix string = ",\"double_spend\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DoubleSpend))
	}
	{
		const prefix string = ",\"balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Balance))
	}
	{
		const prefix string = ",\"rbf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Rbf))
	}
	out.RawByte('}')
}
func easyjson2ff71951DecodeBlockchain5(in *jlexer.Lexer, out *Out) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addr_tag_link":
			out.AddrTagLink = string(in.String())
		case "addr_tag":
			out.AddrTag = string(in.String())
		case "spent":
			out.Spent = bool(in.Bool())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "type":
			out.Type = uint64(in.Uint64())
		case "addr":
			out.Addr = string(in.String())
		case "value":
			out.Value = uint64(in.Uint64())
		case "n":
			out.N = uint64(in.Uint64())
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ff71951EncodeBlockchain5(out *jwriter.Writer, in Out) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addr_tag_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTagLink))
	}
	{
		const prefix string = ",\"addr_tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTag))
	}
	{
		const prefix string = ",\"spent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Spent))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Value))
	}
	{
		const prefix string = ",\"n\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.N))
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	out.RawByte('}')
}
func easyjson2ff71951DecodeBlockchain4(in *jlexer.Lexer, out *Inputs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sequence":
			out.Sequence = uint64(in.Uint64())
		case "witness":
			out.Witness = string(in.String())
		case "prev_out":
			easyjson2ff71951DecodeBlockchain6(in, &out.PrevOut)
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ff71951EncodeBlockchain4(out *jwriter.Writer, in Inputs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Sequence))
	}
	{
		const prefix string = ",\"witness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Witness))
	}
	{
		const prefix string = ",\"prev_out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson2ff71951EncodeBlockchain6(out, in.PrevOut)
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	out.RawByte('}')
}
func easyjson2ff71951DecodeBlockchain6(in *jlexer.Lexer, out *PrevOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addr_tag_link":
			out.AddrTagLink = string(in.String())
		case "addr_tag":
			out.AddrTag = string(in.String())
		case "spent":
			out.Spent = bool(in.Bool())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "type":
			out.Type = uint64(in.Uint64())
		case "addr":
			out.Addr = string(in.String())
		case "value":
			out.Value = uint64(in.Uint64())
		case "n":
			out.N = uint64(in.Uint64())
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ff71951EncodeBlockchain6(out *jwriter.Writer, in PrevOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addr_tag_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTagLink))
	}
	{
		const prefix string = ",\"addr_tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTag))
	}
	{
		const prefix string = ",\"spent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Spent))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Value))
	}
	{
		const prefix string = ",\"n\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.N))
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	out.RawByte('}')
}
