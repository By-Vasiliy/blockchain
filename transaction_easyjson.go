// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package blockchain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson461f4b12DecodeBlockchain(in *jlexer.Lexer, out *Txs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "txs":
			if in.IsNull() {
				in.Skip()
				out.Txs = nil
			} else {
				in.Delim('[')
				if out.Txs == nil {
					if !in.IsDelim(']') {
						out.Txs = make([]Tx, 0, 1)
					} else {
						out.Txs = []Tx{}
					}
				} else {
					out.Txs = (out.Txs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Tx
					(v1).UnmarshalEasyJSON(in)
					out.Txs = append(out.Txs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeBlockchain(out *jwriter.Writer, in Txs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"txs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Txs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Txs {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Txs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeBlockchain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Txs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeBlockchain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Txs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeBlockchain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Txs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeBlockchain(l, v)
}
func easyjson461f4b12DecodeBlockchain1(in *jlexer.Lexer, out *Tx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			out.Result = int64(in.Int64())
		case "ver":
			out.Ver = int64(in.Int64())
		case "size":
			out.Size = uint64(in.Uint64())
		case "inputs":
			if in.IsNull() {
				in.Skip()
				out.Inputs = nil
			} else {
				in.Delim('[')
				if out.Inputs == nil {
					if !in.IsDelim(']') {
						out.Inputs = make([]Inputs, 0, 1)
					} else {
						out.Inputs = []Inputs{}
					}
				} else {
					out.Inputs = (out.Inputs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Inputs
					(v4).UnmarshalEasyJSON(in)
					out.Inputs = append(out.Inputs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = uint64(in.Uint64())
		case "block_height":
			out.BlockHeight = uint64(in.Uint64())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "vin_sz":
			out.VinSz = uint64(in.Uint64())
		case "hash":
			out.Hash = string(in.String())
		case "vout_sz":
			out.VoutSz = uint64(in.Uint64())
		case "relayed_by":
			out.RelayedBy = string(in.String())
		case "out":
			if in.IsNull() {
				in.Skip()
				out.Out = nil
			} else {
				in.Delim('[')
				if out.Out == nil {
					if !in.IsDelim(']') {
						out.Out = make([]Out, 0, 1)
					} else {
						out.Out = []Out{}
					}
				} else {
					out.Out = (out.Out)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Out
					(v5).UnmarshalEasyJSON(in)
					out.Out = append(out.Out, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "weight":
			out.Weight = uint64(in.Uint64())
		case "fee":
			out.Fee = int64(in.Int64())
		case "lock_time":
			out.LockTime = int64(in.Int64())
		case "double_spend":
			out.DoubleSpend = bool(in.Bool())
		case "balance":
			out.Balance = int64(in.Int64())
		case "rbf":
			out.Rbf = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeBlockchain1(out *jwriter.Writer, in Tx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Result))
	}
	{
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ver))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Size))
	}
	{
		const prefix string = ",\"inputs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Inputs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Inputs {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Time))
	}
	{
		const prefix string = ",\"block_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BlockHeight))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"vin_sz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.VinSz))
	}
	{
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"vout_sz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.VoutSz))
	}
	{
		const prefix string = ",\"relayed_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelayedBy))
	}
	{
		const prefix string = ",\"out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Out == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Out {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Weight))
	}
	{
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Fee))
	}
	{
		const prefix string = ",\"lock_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LockTime))
	}
	{
		const prefix string = ",\"double_spend\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DoubleSpend))
	}
	{
		const prefix string = ",\"balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Balance))
	}
	{
		const prefix string = ",\"rbf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Rbf))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tx) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeBlockchain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tx) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeBlockchain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tx) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeBlockchain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tx) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeBlockchain1(l, v)
}
func easyjson461f4b12DecodeBlockchain2(in *jlexer.Lexer, out *PrevOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addr_tag_link":
			out.AddrTagLink = string(in.String())
		case "addr_tag":
			out.AddrTag = string(in.String())
		case "spent":
			out.Spent = bool(in.Bool())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "type":
			out.Type = uint64(in.Uint64())
		case "addr":
			out.Addr = string(in.String())
		case "value":
			out.Value = uint64(in.Uint64())
		case "n":
			out.N = uint64(in.Uint64())
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeBlockchain2(out *jwriter.Writer, in PrevOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addr_tag_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTagLink))
	}
	{
		const prefix string = ",\"addr_tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTag))
	}
	{
		const prefix string = ",\"spent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Spent))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Value))
	}
	{
		const prefix string = ",\"n\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.N))
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PrevOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeBlockchain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PrevOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeBlockchain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PrevOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeBlockchain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PrevOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeBlockchain2(l, v)
}
func easyjson461f4b12DecodeBlockchain3(in *jlexer.Lexer, out *Out) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addr_tag_link":
			out.AddrTagLink = string(in.String())
		case "addr_tag":
			out.AddrTag = string(in.String())
		case "spent":
			out.Spent = bool(in.Bool())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "type":
			out.Type = uint64(in.Uint64())
		case "addr":
			out.Addr = string(in.String())
		case "value":
			out.Value = uint64(in.Uint64())
		case "n":
			out.N = uint64(in.Uint64())
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeBlockchain3(out *jwriter.Writer, in Out) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addr_tag_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTagLink))
	}
	{
		const prefix string = ",\"addr_tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTag))
	}
	{
		const prefix string = ",\"spent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Spent))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Value))
	}
	{
		const prefix string = ",\"n\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.N))
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Out) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeBlockchain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Out) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeBlockchain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Out) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeBlockchain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Out) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeBlockchain3(l, v)
}
func easyjson461f4b12DecodeBlockchain4(in *jlexer.Lexer, out *Inputs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sequence":
			out.Sequence = uint64(in.Uint64())
		case "witness":
			out.Witness = string(in.String())
		case "prev_out":
			(out.PrevOut).UnmarshalEasyJSON(in)
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeBlockchain4(out *jwriter.Writer, in Inputs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Sequence))
	}
	{
		const prefix string = ",\"witness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Witness))
	}
	{
		const prefix string = ",\"prev_out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.PrevOut).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Inputs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeBlockchain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Inputs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeBlockchain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Inputs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeBlockchain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Inputs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeBlockchain4(l, v)
}
