// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package blockchain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF4fdf71eDecodeBlockchain(in *jlexer.Lexer, out *Wallet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "n_tx":
			out.NTx = uint64(in.Uint64())
		case "n_tx_filtered":
			out.NTxFiltered = uint64(in.Uint64())
		case "total_received":
			out.TotalReceived = uint64(in.Uint64())
		case "total_sent":
			out.TotalSent = uint64(in.Uint64())
		case "final_balance":
			out.FinalBalance = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain(out *jwriter.Writer, in Wallet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"n_tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.NTx))
	}
	{
		const prefix string = ",\"n_tx_filtered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.NTxFiltered))
	}
	{
		const prefix string = ",\"total_received\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TotalReceived))
	}
	{
		const prefix string = ",\"total_sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TotalSent))
	}
	{
		const prefix string = ",\"final_balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.FinalBalance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Wallet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeBlockchain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Wallet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeBlockchain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Wallet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeBlockchain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Wallet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeBlockchain(l, v)
}
func easyjsonF4fdf71eDecodeBlockchain1(in *jlexer.Lexer, out *SymbolLocal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "conversion":
			out.Conversion = float64(in.Float64())
		case "symbolAppearsAfter":
			out.SymbolAppearsAfter = bool(in.Bool())
		case "local":
			out.Local = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain1(out *jwriter.Writer, in SymbolLocal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"conversion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Conversion))
	}
	{
		const prefix string = ",\"symbolAppearsAfter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SymbolAppearsAfter))
	}
	{
		const prefix string = ",\"local\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Local))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SymbolLocal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeBlockchain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SymbolLocal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeBlockchain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SymbolLocal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeBlockchain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SymbolLocal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeBlockchain1(l, v)
}
func easyjsonF4fdf71eDecodeBlockchain2(in *jlexer.Lexer, out *SymbolBtc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "conversion":
			out.Conversion = float64(in.Float64())
		case "symbolAppearsAfter":
			out.SymbolAppearsAfter = bool(in.Bool())
		case "local":
			out.Local = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain2(out *jwriter.Writer, in SymbolBtc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"conversion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Conversion))
	}
	{
		const prefix string = ",\"symbolAppearsAfter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SymbolAppearsAfter))
	}
	{
		const prefix string = ",\"local\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Local))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SymbolBtc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeBlockchain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SymbolBtc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeBlockchain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SymbolBtc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeBlockchain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SymbolBtc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeBlockchain2(l, v)
}
func easyjsonF4fdf71eDecodeBlockchain3(in *jlexer.Lexer, out *MultiAddr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "recommend_include_fee":
			out.RecommendIncludeFee = bool(in.Bool())
		case "sharedcoin_endpoint":
			out.SharedcoinEndpoint = string(in.String())
		case "wallet":
			(out.Wallet).UnmarshalEasyJSON(in)
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]Address, 0, 1)
					} else {
						out.Addresses = []Address{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Address
					(v1).UnmarshalEasyJSON(in)
					out.Addresses = append(out.Addresses, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "txs":
			if in.IsNull() {
				in.Skip()
				out.Txs = nil
			} else {
				in.Delim('[')
				if out.Txs == nil {
					if !in.IsDelim(']') {
						out.Txs = make([]Tx, 0, 1)
					} else {
						out.Txs = []Tx{}
					}
				} else {
					out.Txs = (out.Txs)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Tx
					easyjsonF4fdf71eDecodeBlockchain4(in, &v2)
					out.Txs = append(out.Txs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "info":
			(out.Info).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain3(out *jwriter.Writer, in MultiAddr) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RecommendIncludeFee {
		const prefix string = ",\"recommend_include_fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RecommendIncludeFee))
	}
	if in.SharedcoinEndpoint != "" {
		const prefix string = ",\"sharedcoin_endpoint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SharedcoinEndpoint))
	}
	{
		const prefix string = ",\"wallet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Wallet).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"addresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Addresses {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"txs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Txs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Txs {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjsonF4fdf71eEncodeBlockchain4(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Info).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiAddr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeBlockchain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiAddr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeBlockchain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiAddr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeBlockchain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiAddr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeBlockchain3(l, v)
}
func easyjsonF4fdf71eDecodeBlockchain4(in *jlexer.Lexer, out *Tx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			out.Result = int64(in.Int64())
		case "ver":
			out.Ver = int64(in.Int64())
		case "size":
			out.Size = uint64(in.Uint64())
		case "inputs":
			if in.IsNull() {
				in.Skip()
				out.Inputs = nil
			} else {
				in.Delim('[')
				if out.Inputs == nil {
					if !in.IsDelim(']') {
						out.Inputs = make([]Inputs, 0, 1)
					} else {
						out.Inputs = []Inputs{}
					}
				} else {
					out.Inputs = (out.Inputs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Inputs
					easyjsonF4fdf71eDecodeBlockchain5(in, &v7)
					out.Inputs = append(out.Inputs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = uint64(in.Uint64())
		case "block_height":
			out.BlockHeight = uint64(in.Uint64())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "vin_sz":
			out.VinSz = uint64(in.Uint64())
		case "hash":
			out.Hash = string(in.String())
		case "vout_sz":
			out.VoutSz = uint64(in.Uint64())
		case "relayed_by":
			out.RelayedBy = string(in.String())
		case "out":
			if in.IsNull() {
				in.Skip()
				out.Out = nil
			} else {
				in.Delim('[')
				if out.Out == nil {
					if !in.IsDelim(']') {
						out.Out = make([]Out, 0, 1)
					} else {
						out.Out = []Out{}
					}
				} else {
					out.Out = (out.Out)[:0]
				}
				for !in.IsDelim(']') {
					var v8 Out
					easyjsonF4fdf71eDecodeBlockchain6(in, &v8)
					out.Out = append(out.Out, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "weight":
			out.Weight = uint64(in.Uint64())
		case "fee":
			out.Fee = int64(in.Int64())
		case "lock_time":
			out.LockTime = int64(in.Int64())
		case "double_spend":
			out.DoubleSpend = bool(in.Bool())
		case "balance":
			out.Balance = int64(in.Int64())
		case "rbf":
			out.Rbf = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain4(out *jwriter.Writer, in Tx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Result))
	}
	{
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ver))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Size))
	}
	{
		const prefix string = ",\"inputs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Inputs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Inputs {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjsonF4fdf71eEncodeBlockchain5(out, v10)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Time))
	}
	{
		const prefix string = ",\"block_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BlockHeight))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"vin_sz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.VinSz))
	}
	{
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"vout_sz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.VoutSz))
	}
	{
		const prefix string = ",\"relayed_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelayedBy))
	}
	{
		const prefix string = ",\"out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Out == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Out {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonF4fdf71eEncodeBlockchain6(out, v12)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Weight))
	}
	{
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Fee))
	}
	{
		const prefix string = ",\"lock_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LockTime))
	}
	{
		const prefix string = ",\"double_spend\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DoubleSpend))
	}
	{
		const prefix string = ",\"balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Balance))
	}
	{
		const prefix string = ",\"rbf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Rbf))
	}
	out.RawByte('}')
}
func easyjsonF4fdf71eDecodeBlockchain6(in *jlexer.Lexer, out *Out) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addr_tag_link":
			out.AddrTagLink = string(in.String())
		case "addr_tag":
			out.AddrTag = string(in.String())
		case "spent":
			out.Spent = bool(in.Bool())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "type":
			out.Type = uint64(in.Uint64())
		case "addr":
			out.Addr = string(in.String())
		case "value":
			out.Value = uint64(in.Uint64())
		case "n":
			out.N = uint64(in.Uint64())
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain6(out *jwriter.Writer, in Out) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addr_tag_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTagLink))
	}
	{
		const prefix string = ",\"addr_tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTag))
	}
	{
		const prefix string = ",\"spent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Spent))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Value))
	}
	{
		const prefix string = ",\"n\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.N))
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	out.RawByte('}')
}
func easyjsonF4fdf71eDecodeBlockchain5(in *jlexer.Lexer, out *Inputs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sequence":
			out.Sequence = uint64(in.Uint64())
		case "witness":
			out.Witness = string(in.String())
		case "prev_out":
			easyjsonF4fdf71eDecodeBlockchain7(in, &out.PrevOut)
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain5(out *jwriter.Writer, in Inputs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Sequence))
	}
	{
		const prefix string = ",\"witness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Witness))
	}
	{
		const prefix string = ",\"prev_out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF4fdf71eEncodeBlockchain7(out, in.PrevOut)
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	out.RawByte('}')
}
func easyjsonF4fdf71eDecodeBlockchain7(in *jlexer.Lexer, out *PrevOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addr_tag_link":
			out.AddrTagLink = string(in.String())
		case "addr_tag":
			out.AddrTag = string(in.String())
		case "spent":
			out.Spent = bool(in.Bool())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "type":
			out.Type = uint64(in.Uint64())
		case "addr":
			out.Addr = string(in.String())
		case "value":
			out.Value = uint64(in.Uint64())
		case "n":
			out.N = uint64(in.Uint64())
		case "script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain7(out *jwriter.Writer, in PrevOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addr_tag_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTagLink))
	}
	{
		const prefix string = ",\"addr_tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddrTag))
	}
	{
		const prefix string = ",\"spent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Spent))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Value))
	}
	{
		const prefix string = ",\"n\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.N))
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	out.RawByte('}')
}
func easyjsonF4fdf71eDecodeBlockchain8(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nconnected":
			out.NConnected = uint64(in.Uint64())
		case "conversion":
			out.Conversion = float64(in.Float64())
		case "symbol_local":
			(out.SymbolLocal).UnmarshalEasyJSON(in)
		case "symbol_btc":
			(out.SymbolBtc).UnmarshalEasyJSON(in)
		case "latest_block":
			easyjsonF4fdf71eDecodeBlockchain9(in, &out.LatestBlock)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain8(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nconnected\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.NConnected))
	}
	{
		const prefix string = ",\"conversion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Conversion))
	}
	{
		const prefix string = ",\"symbol_local\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.SymbolLocal).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"symbol_btc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.SymbolBtc).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"latest_block\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF4fdf71eEncodeBlockchain9(out, in.LatestBlock)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeBlockchain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeBlockchain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeBlockchain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeBlockchain8(l, v)
}
func easyjsonF4fdf71eDecodeBlockchain9(in *jlexer.Lexer, out *LatestBlock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "time":
			out.Time = uint64(in.Uint64())
		case "block_index":
			out.BlockIndex = uint64(in.Uint64())
		case "height":
			out.Height = uint64(in.Uint64())
		case "txIndexes":
			if in.IsNull() {
				in.Skip()
				out.TxIndexes = nil
			} else {
				in.Delim('[')
				if out.TxIndexes == nil {
					if !in.IsDelim(']') {
						out.TxIndexes = make([]uint64, 0, 8)
					} else {
						out.TxIndexes = []uint64{}
					}
				} else {
					out.TxIndexes = (out.TxIndexes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 uint64
					v13 = uint64(in.Uint64())
					out.TxIndexes = append(out.TxIndexes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain9(out *jwriter.Writer, in LatestBlock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Time))
	}
	{
		const prefix string = ",\"block_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BlockIndex))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Height))
	}
	{
		const prefix string = ",\"txIndexes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TxIndexes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.TxIndexes {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF4fdf71eDecodeBlockchain10(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash160":
			out.Hash160 = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "n_tx":
			out.NTx = uint64(in.Uint64())
		case "total_received":
			out.TotalReceived = uint64(in.Uint64())
		case "total_sent":
			out.TotalSent = uint64(in.Uint64())
		case "final_balance":
			out.FinalBalance = uint64(in.Uint64())
		case "txs":
			if in.IsNull() {
				in.Skip()
				out.Txs = nil
			} else {
				in.Delim('[')
				if out.Txs == nil {
					if !in.IsDelim(']') {
						out.Txs = make([]Tx, 0, 1)
					} else {
						out.Txs = []Tx{}
					}
				} else {
					out.Txs = (out.Txs)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Tx
					easyjsonF4fdf71eDecodeBlockchain4(in, &v16)
					out.Txs = append(out.Txs, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "change_index":
			out.ChangeIndex = uint64(in.Uint64())
		case "account_index":
			out.AccountIndex = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF4fdf71eEncodeBlockchain10(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hash160 != "" {
		const prefix string = ",\"hash160\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash160))
	}
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"n_tx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.NTx))
	}
	{
		const prefix string = ",\"total_received\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TotalReceived))
	}
	{
		const prefix string = ",\"total_sent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TotalSent))
	}
	{
		const prefix string = ",\"final_balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.FinalBalance))
	}
	if len(in.Txs) != 0 {
		const prefix string = ",\"txs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Txs {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjsonF4fdf71eEncodeBlockchain4(out, v18)
			}
			out.RawByte(']')
		}
	}
	if in.ChangeIndex != 0 {
		const prefix string = ",\"change_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ChangeIndex))
	}
	if in.AccountIndex != 0 {
		const prefix string = ",\"account_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.AccountIndex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF4fdf71eEncodeBlockchain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF4fdf71eEncodeBlockchain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF4fdf71eDecodeBlockchain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF4fdf71eDecodeBlockchain10(l, v)
}
