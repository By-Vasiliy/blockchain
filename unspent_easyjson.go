// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package blockchain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9c39ca49DecodeBlockchain(in *jlexer.Lexer, out *UnspentOutputs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notice":
			out.Notice = string(in.String())
		case "unspent_outputs":
			if in.IsNull() {
				in.Skip()
				out.UnspentOutputs = nil
			} else {
				in.Delim('[')
				if out.UnspentOutputs == nil {
					if !in.IsDelim(']') {
						out.UnspentOutputs = make([]UnspentOutput, 0, 1)
					} else {
						out.UnspentOutputs = []UnspentOutput{}
					}
				} else {
					out.UnspentOutputs = (out.UnspentOutputs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UnspentOutput
					(v1).UnmarshalEasyJSON(in)
					out.UnspentOutputs = append(out.UnspentOutputs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9c39ca49EncodeBlockchain(out *jwriter.Writer, in UnspentOutputs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Notice != "" {
		const prefix string = ",\"notice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notice))
	}
	{
		const prefix string = ",\"unspent_outputs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UnspentOutputs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.UnspentOutputs {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnspentOutputs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9c39ca49EncodeBlockchain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnspentOutputs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9c39ca49EncodeBlockchain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnspentOutputs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9c39ca49DecodeBlockchain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnspentOutputs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9c39ca49DecodeBlockchain(l, v)
}
func easyjson9c39ca49DecodeBlockchain1(in *jlexer.Lexer, out *UnspentOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tx_age":
			out.TxAge = string(in.String())
		case "tx_hash":
			out.TxHash = string(in.String())
		case "tx_index":
			out.TxIndex = uint64(in.Uint64())
		case "tx_output_n":
			out.TxOutputN = uint64(in.Uint64())
		case "script":
			out.Script = string(in.String())
		case "value":
			out.Value = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9c39ca49EncodeBlockchain1(out *jwriter.Writer, in UnspentOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tx_age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TxAge))
	}
	{
		const prefix string = ",\"tx_hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TxHash))
	}
	{
		const prefix string = ",\"tx_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxIndex))
	}
	{
		const prefix string = ",\"tx_output_n\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxOutputN))
	}
	{
		const prefix string = ",\"script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Script))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnspentOutput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9c39ca49EncodeBlockchain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnspentOutput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9c39ca49EncodeBlockchain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnspentOutput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9c39ca49DecodeBlockchain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnspentOutput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9c39ca49DecodeBlockchain1(l, v)
}
